import React, { useState, useEffect } from "react";
import {
  Table,
  Button,
  Space,
  message,
  Modal,
  Form,
  Input,
  Select,
  Popconfirm,
} from "antd";
import { useNavigate } from "react-router-dom";
import attributeApi from "../../api/attributeApi";
import valueAttributeApi from "../../api/valueAttributeApi";

const { Option } = Select;

const AttributeForm = () => {
  const [attributes, setAttributes] = useState([]); // Danh s√°ch thu·ªôc t√≠nh (Color, Size)
  const [selectedAttribute, setSelectedAttribute] = useState(null); // Thu·ªôc t√≠nh ƒëang ch·ªçn
  const [isAddModalOpen, setIsAddModalOpen] = useState(false); // Modal th√™m m·ªõi
  const [formAdd] = Form.useForm();
  const navigate = useNavigate();

  useEffect(() => {
    fetchAttributes();
  }, []);

  // L·∫•y danh s√°ch thu·ªôc t√≠nh (Color, Size)
  const fetchAttributes = async () => {
    try {
      const { data } = await attributeApi.getAll();
      setAttributes(data);
    } catch (error) {
      message.error("L·ªói khi l·∫•y danh s√°ch thu·ªôc t√≠nh!");
    }
  };

  // Ch·ªçn `Color` ho·∫∑c `Size` ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng
  const handleSelectAttribute = (attributeName) => {
    const attribute = attributes.find(
      (attr) => attr.name.toLowerCase() === attributeName.toLowerCase()
    );
    setSelectedAttribute(attribute || null);
  };

  // M·ªü Modal "Th√™m Gi√° Tr·ªã"
  const showAddModal = () => {
    formAdd.resetFields();
    setIsAddModalOpen(true);
  };

  // ƒê√≥ng Modal
  const handleAddCancel = () => {
    setIsAddModalOpen(false);
    formAdd.resetFields();
  };

  // X·ª≠ l√Ω th√™m gi√° tr·ªã bi·∫øn th·ªÉ
  const handleAddSave = async (values) => {
    try {
      const attributeId = values.attributeId;
      if (!attributeId) {
        message.error("Vui l√≤ng ch·ªçn thu·ªôc t√≠nh!");
        return;
      }

      console.log(
        `üÜï T·∫°o ValueAttribute "${values.name}" cho Attribute ID: ${attributeId}`
      );

      // ‚úÖ G·ªçi API `createValueAttribute`
      const response = await valueAttributeApi.create({
        id: attributeId,
        name: values.name,
      });

      message.success("Th√™m gi√° tr·ªã m·ªõi th√†nh c√¥ng!");

      // ‚úÖ C·∫≠p nh·∫≠t `state` ngay l·∫≠p t·ª©c thay v√¨ g·ªçi API l·∫°i
      setAttributes((prevAttributes) =>
        prevAttributes.map((attr) =>
          attr._id === attributeId
            ? { ...attr, values: [...attr.values, response.data.value] }
            : attr
        )
      );

      // ‚úÖ N·∫øu ƒëang xem b·∫£ng c·ªßa thu·ªôc t√≠nh v·ª´a c·∫≠p nh·∫≠t, c≈©ng c·∫≠p nh·∫≠t ngay
      if (selectedAttribute?._id === attributeId) {
        setSelectedAttribute((prev) => ({
          ...prev,
          values: [...prev.values, response.data.value],
        }));
      }

      handleAddCancel();
    } catch (error) {
      message.error("L·ªói khi th√™m gi√° tr·ªã bi·∫øn th·ªÉ!");
    }
  };

  // X√≥a gi√° tr·ªã bi·∫øn th·ªÉ
  const handleDelete = async (valueId) => {
    try {
      if (!selectedAttribute) {
        message.error("Vui l√≤ng ch·ªçn thu·ªôc t√≠nh tr∆∞·ªõc khi x√≥a!");
        return;
      }

      const attributeId = selectedAttribute._id;
      console.log("üóëÔ∏è G·ª≠i y√™u c·∫ßu x√≥a v·ªõi d·ªØ li·ªáu:", { valueId, attributeId });

      await valueAttributeApi.delete(valueId, attributeId);
      message.success("X√≥a gi√° tr·ªã bi·∫øn th·ªÉ th√†nh c√¥ng!");

      // ‚úÖ C·∫≠p nh·∫≠t `state` ngay l·∫≠p t·ª©c thay v√¨ g·ªçi API l·∫°i
      setAttributes((prevAttributes) =>
        prevAttributes.map((attr) =>
          attr._id === attributeId
            ? { ...attr, values: attr.values.filter((v) => v._id !== valueId) }
            : attr
        )
      );

      // ‚úÖ N·∫øu ƒëang xem b·∫£ng c·ªßa thu·ªôc t√≠nh v·ª´a c·∫≠p nh·∫≠t, c≈©ng c·∫≠p nh·∫≠t ngay
      if (selectedAttribute?._id === attributeId) {
        setSelectedAttribute((prev) => ({
          ...prev,
          values: prev.values.filter((v) => v._id !== valueId),
        }));
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a gi√° tr·ªã bi·∫øn th·ªÉ:", error);
      message.error("L·ªói khi x√≥a gi√° tr·ªã bi·∫øn th·ªÉ!");
    }
  };

  return (
    <div>
      {/* Header - 3 N√∫t Ch·ª©c NƒÉng */}
      <Space style={{ marginBottom: 16 }}>
        <Button
          type={selectedAttribute?.name === "Color" ? "primary" : "default"}
          onClick={() => handleSelectAttribute("Color")}
        >
          Color
        </Button>
        <Button
          type={selectedAttribute?.name === "Size" ? "primary" : "default"}
          onClick={() => handleSelectAttribute("Size")}
        >
          Size
        </Button>
        <Button type="primary" onClick={showAddModal}>
          + Th√™m Gi√° Tr·ªã
        </Button>
        <Button onClick={() => navigate("/admin/products")}>Quay l·∫°i</Button>
      </Space>

      {/* Hi·ªÉn th·ªã b·∫£ng gi√° tr·ªã n·∫øu c√≥ thu·ªôc t√≠nh ƒë∆∞·ª£c ch·ªçn */}
      {selectedAttribute ? (
        <>
          <Table
            columns={[
              {
                title: "STT",
                dataIndex: "stt",
                key: "stt",
                render: (_, __, index) => index + 1,
              },
              { title: "T√™n gi√° tr·ªã", dataIndex: "name", key: "name" },
              {
                title: "H√†nh ƒë·ªông",
                key: "action",
                render: (_, record) => (
                  <Space>
                    <Popconfirm
                      title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?"
                      onConfirm={() => handleDelete(record._id)}
                      okText="C√≥"
                      cancelText="Kh√¥ng"
                    >
                      <Button danger>X√≥a</Button>
                    </Popconfirm>
                  </Space>
                ),
              },
            ]}
            dataSource={selectedAttribute.values}
            rowKey="_id"
            pagination={{ pageSize: 10 }}
          />
        </>
      ) : (
        <p>Vui l√≤ng ch·ªçn "Color" ho·∫∑c "Size" ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch.</p>
      )}

      {/* Modal "Th√™m Gi√° Tr·ªã" */}
      <Modal
        title="Th√™m Gi√° Tr·ªã M·ªõi"
        open={isAddModalOpen}
        onCancel={handleAddCancel}
        onOk={() => formAdd.submit()}
      >
        <Form form={formAdd} layout="vertical" onFinish={handleAddSave}>
          <Form.Item
            name="attributeId"
            label="Ch·ªçn Thu·ªôc T√≠nh"
            rules={[{ required: true }]}
          >
            <Select placeholder="Ch·ªçn thu·ªôc t√≠nh">
              {attributes.map((attr) => (
                <Option key={attr._id} value={attr._id}>
                  {attr.name}
                </Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item
            name="name"
            label="T√™n Gi√° Tr·ªã"
            rules={[{ required: true }]}
          >
            <Input placeholder="Nh·∫≠p gi√° tr·ªã bi·∫øn th·ªÉ" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AttributeForm;
